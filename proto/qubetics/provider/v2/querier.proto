syntax = "proto3";
package qubetics.provider.v2;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "qubetics/provider/v2/params.proto";
import "qubetics/provider/v2/provider.proto";
import "qubetics/types/v1/status.proto";

option go_package = "github.com/qubetics/qubetics-blockchain/v2/x/provider/types/v2";
option (gogoproto.equal_all) = false;
option (gogoproto.goproto_getters_all) = false;

message QueryProvidersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  qubetics.types.v1.Status status = 2;
}

message QueryProviderRequest {
  string address = 1;
}

message QueryParamsRequest {}

message QueryProvidersResponse {
  repeated Provider providers = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryProviderResponse {
  Provider provider = 1 [(gogoproto.nullable) = false];
}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

service QueryService {
  rpc QueryProviders(QueryProvidersRequest) returns (QueryProvidersResponse) {
    option (google.api.http).get = "/qubetics/provider/v2/providers";
  }
  rpc QueryProvider(QueryProviderRequest) returns (QueryProviderResponse) {
    option (google.api.http).get = "/qubetics/provider/v2/providers/{address}";
  }
  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/qubetics/provider/v2/params";
  }
}
